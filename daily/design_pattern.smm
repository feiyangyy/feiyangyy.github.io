{"layout":"logicalStructure","root":{"data":{"text":"<p>设计模式</p>","expand":true,"uid":"29b01092-d055-4e62-9e96-a3d918142469","richText":true,"isActive":false,"imgMap":{}},"children":[{"data":{"text":"<p>享元模式</p>","uid":"f3a4eec9-147f-4b31-92f0-46192d4b54a7","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>使用对象池，获取对象时，如果没有key则创建，如果有则直接返回</p>","uid":"be0c9ef1-0703-4d25-9aac-adb4d5f14dbd","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>小粒度的对象的复用，比如: 字体对象</p>","uid":"583af83d-0ed1-46dc-8f97-80cfbecf7a7d","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>只读</p>","uid":"1819cd7a-cf8c-40bc-a413-d01a69211290","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>每个使用者都构造自己的对象的话会造成内存膨胀</p>","uid":"82d5b57d-c316-481a-9574-91e39efc872f","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>共享的内容</p>","uid":"c3ad23ab-bd80-412c-aef6-8c270d60a0f1","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>内部状态，可共享，一般不可更改</p>","uid":"628207bf-1e7d-4bf3-8675-2956dc335d6a","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>外部状态，不可共享，需要由外部设置</p>","uid":"95945088-6690-4ff9-a705-aaee8361eca7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>需要拆分内外状态</p>","uid":"3c28945f-5ba6-406e-a2a3-378646480dad","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">代理模式</span></p>","uid":"dd3696b4-a2a8-4468-a23b-11e305888565","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>解决问题：不方便直接访问对象，或者要刻意隐藏真实对象</p>","uid":"1e58f7ef-a94e-4ec5-a719-0d3c8657db31","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>现实世界中的网络代理和反向代理</p>","uid":"522ec2e0-2487-4645-a116-3ba3876df556","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>一些权限控制</p>","uid":"7e54de58-88ed-4202-8e21-abeb0ba66422","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>一些重型对象，在需要时才创建，比如std::string的 COW</p>","uid":"935a1041-ba64-4eb7-9920-158c1d1cf163","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>访问时添加一些额外的动作</p>","uid":"bca0e39a-88fb-4628-bcfb-03b915578c6d","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>具体方法：创建一个代理类，内部持有真实对象，然后通过代理的接口访问真实的对象功能，这里具体是不是继承自一个base class， i don't think it matters</p>","uid":"3d482717-8b1f-4c20-b882-fe6bdd379ffb","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>主要缺点: 实现代理需要额外的工作，一些高性能场合，使用代理会增加开销</p>","uid":"a9099bb6-5646-4742-aac9-7502f6656f16","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">适配器模式</span></p>","uid":"f3d2ce3d-fafd-40f0-a82a-3e56f460838f","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>把已有的类的接口转换为目标接口</p>","uid":"3dee7280-c9a4-4741-9c70-79a624421efb","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>类比显示世界中，把110V转为220V的适配器</p>","uid":"4b0e0c34-0c07-4a2f-a082-ba83b78840e1","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>为已有的类添加一个封装器，封装器封装成业务想要的接口，并实现功能</p>","uid":"6b75d1bc-8bfb-4e0f-806b-71c320528474","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>例如C++中的容器适配器: stack queue 等等</p>","uid":"06cf7fef-5eef-4264-8ba8-373f38b03ebe","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>目标类：业务接口</p>","uid":"6483dc45-56cc-4414-9a55-1912849c1d2a","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>适配者类：现有代码</p>","uid":"425b7321-d28d-4c28-925e-a08f87fff8d8","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>适配器类：封装代码</p>","uid":"7107a26f-c87e-42dc-8bc3-1dfaaeee6876","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>类适配器</p>","uid":"fb4d2a76-a3b1-4520-9450-254e35e594f0","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>通过继承实现，要同事继承目标类和适配者类，很多语言不支持</p>","uid":"4ceb13df-c74b-49d7-906e-fd309a055208","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>对象适配器</p>","uid":"21dfc712-6226-42c3-9340-167db3976729","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>组合实现，适配器内中拥有一个适配者实例， 略微增加成本</p>","uid":"9c648755-21b9-43e2-9956-a8f8a2645dd8","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">工厂</span></p>","uid":"21e15727-d145-4612-8d31-34da5e1682f7","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>简单工厂</p>","uid":"a7205864-27d5-4d71-9c0f-217d75361825","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>内部通过swi-case 或者if-else， 根据输入参数创建具体对象</p>","uid":"52d2efef-7251-4b7f-b7c0-11beca1461ad","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>代码很容易随着类型增加而膨胀</p>","uid":"29eb88c0-e539-4467-a588-64c1e5922132","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>工厂方法</p>","uid":"034aa1eb-cb4c-4dd8-bc62-d21747991ed7","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>每个类型对应于一个工厂，一共有四个类</p>","uid":"9860599c-b51c-41c0-82e2-263398d105f4","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>产品base class</p>","uid":"3aa66167-7381-48f9-a868-dbb3ed9484a7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>Factory base class</p>","uid":"8dfcc77a-144c-4111-a615-5a150b53c9b1","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>Concrete class</p>","uid":"38e54d31-82d2-4b8b-a712-d4e5274aca6f","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>Concrete factory class</p>","uid":"032156c0-ad05-41a4-a0c9-7eff63ce8c03","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>业务代码，需要明确知道使用哪个工厂，以产生哪个对应的产品。 新增类型只需要增加产品类和对应的工厂类</p>","uid":"f12b5774-8157-415f-9d0a-19d8aa5abb2d","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>相比较于简单工厂，可以消除冗余的if-else, 但未解决客户端静态感知问题</p>","uid":"d7b9e40c-a0e0-4134-9b01-f71ab672028c","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>抽象工厂</p>","uid":"ba4affc9-f54d-4356-a66e-3c2592271286","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>一个工厂可以产生一个产品族，比如Apple工厂产生的laptop/phone/pad 以及Xiaomi 生成的对应的产品</p>","uid":"b08bc08e-c093-4864-a2a0-9bbb725af72b","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">反射和动态注册机制</span></p>","uid":"09608b8c-af92-43f0-b3e0-05c54954a53e","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>将生成方法动态注册到全局的某个生成器中，客户端可以运行时选择生成什么样的类型，而消除静态感知</p>","uid":"d832ab24-0336-4b31-a94d-9e1c61ad508b","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>观察者</p>","uid":"79f5a362-1add-40b9-a26a-02c0e6444e5a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>观察某些业务代码的发生，客户端实现自己的观察者供业务代码调用</p>","uid":"8782fb40-42be-40be-a321-b71bb73a2203","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>解耦实现和客户端代码，只是一种手段，具体也可以体现为回调函数等</p>","uid":"4efac3e3-2fb4-4116-b211-278620b018f3","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>桥接</p>","uid":"0f188f68-bd2d-4be2-8cd9-24cc68ac682b","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>分离一个类设计中的变和不变的部分，并将变化的部分拆分成单独的类，通过组合（桥）来完成对变化的兼容</p>","uid":"4a426b2d-e252-49a6-a996-95ff2ee501e2","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>一句话概括就是类拆分，桥模式应用相当普遍以至于一般不会专门显示的出现这样的代码命名</p>","uid":"d66bacbf-423a-419a-9fea-f424d5239cf0","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>大多数框架中的桥是指通信的桥梁，比如LuaBridge、xx Bridge 这种</p>","uid":"25092f72-8a84-4a6a-b8aa-01f90de9baaf","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>策略</p>","uid":"cf0e2faa-7e31-4bb5-936b-745bc49c67f2","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>分离业务和算法实现，通过抽象的算法基类+算法派生类完成扩展，业务代码只面向算法基类编程</p>","uid":"2f92b0de-89c7-403b-a7b6-56abd2581e6e","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>需要明确知道使用什么样的算法，这里可能要搭配工厂模式</p>","uid":"62dc9e88-bf0f-4f31-8ad4-7d1e9bc813a1","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>如果出现大量算法对象，则要考虑使用享元模式，减少对象数量</p>","uid":"8f419ef6-2d38-4efe-bc54-5c29b609efcf","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>模板方法</p>","uid":"df55f2e4-4a77-4118-8eed-3246487c9233","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>Builder</p>","uid":"fe628dd0-dd38-4630-ac8f-e7a275a0726b","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">装饰</span></p>","uid":"4d54de86-c914-4168-aa1b-0f0280c93854","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><span style=\"color: rgb(244, 78, 59);\">单例</span></p>","uid":"68fd6dc5-3813-4436-ac57-c9123db5c150","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>懒汉</p>","uid":"e07ac5b4-ddae-43bf-924d-93ab39fd185c","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>调用instance时再创建</p>","uid":"06282088-0a13-44f6-bb0b-4b4be097f964","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>双重if 判断</p>","uid":"bfc25b57-3e55-4cc3-a857-e4c548a62987","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>第一次if 判断 是否为空，减少锁竞争</p>","uid":"d3f04615-7e2b-4314-89e3-21a3c478c700","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>第二次if 判断防止重复创建</p>","uid":"6982313f-b0da-40be-a634-0526feb2dd0a","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>类比于atomic的 load 和 cas操作</p>","uid":"daf554c4-270e-4502-ae47-bce8a6f341ea","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>饿汉</p>","uid":"856ab493-3482-4336-bcc6-ffb52736f94c","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>尽可能早的创建instance, 比如在class的static 成员、函数的static 成员</p>","uid":"a2e7cce2-dc44-43d3-b18b-099198338ada","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>在.ini段创建</p>","uid":"b4f3ae76-13fc-46b5-8282-c5f78c18031c","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>C++全局构造和析构</p>","uid":"df3e4fd0-34aa-4557-990e-7f142a01a9e0","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>全局构造：在.ini 代码段中，运行在main 入口之前</p>","uid":"42f1f3bc-7252-4ea4-99a0-c5ef2b3693e3","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>全局析构：在.fni 段中，运行在main 结束后</p>","uid":"3bae36d3-4b46-44bc-b67c-6a948488252b","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>ELF的装载</p>","uid":"c1691ec4-d0c7-49cd-893c-6f846eae9d61","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>用于一些全局共享的资源，比如线程池</p>","uid":"d89dccf3-01d2-4304-8648-7cb19c0d5d11","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>原型模式</p>","uid":"c823240a-213a-446d-a6a7-4714e2ad7d86","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>对于复杂对象，提供一些预设的对象实例提供复制，通过clone 进行复制，C++中就是拷贝构造，其他语言可能需要别的方法</p>","uid":"7c602fb8-07c0-48fe-9d33-04c08577f1ed","expand":true,"richText":true,"isActive":false},"children":[]}]}],"smmVersion":"0.14.0-fix.1"},"theme":{"template":"classic4","config":{}},"view":{"transform":{"scaleX":1,"scaleY":1,"shear":0,"rotate":0,"translateX":0,"translateY":800,"originX":0,"originY":0,"a":1,"b":0,"c":0,"d":1,"e":0,"f":800},"state":{"scale":1,"x":0,"y":800,"sx":0,"sy":0}}}