{"layout":"logicalStructure","root":{"data":{"text":"<p>构造形式</p>","expand":true,"uid":"55bbc717-5682-4b99-ba2c-a6a505f1e65e","richText":true,"isActive":false,"imgMap":{},"generalization":[{"text":"<p>C++98</p>","range":[0,1],"uid":"587c1e1e-575a-4093-883f-7bf105a3d6d7","richText":true,"isActive":false,"expand":true}]},"children":[{"data":{"text":"<p>默认构造 A a, 或者A a = A();</p>","uid":"3c729f08-d2eb-498f-9e57-ab2ee2da7b70","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>带参数构造 A a&nbsp;&nbsp;= A(xxx);</p>","uid":"66eaa7ba-566f-4ebc-8ee2-e498f5388872","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>花括号构造 A a{1,2,3} 或者 A a = {1,2,3}；A a = A{1,2,3}</p>","uid":"0d0052f0-8fd8-488b-9886-54986773ac89","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>要求构造函数接收三个参数，且可被{1,2,3} 初始化</p>","uid":"fd72b532-31fb-4942-aeee-3f15a882edf3","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>当存在initialize_list 的重载版本时，优先匹配inialize_list</p>","uid":"65958e12-7376-4714-b674-97785e0d49d7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>一般推荐使用花括号初始化，可以阻止类型窄化</p>","uid":"1cb68a2e-f5ea-490e-b694-4d8f66eafe97","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p><strong>构造规则（记）:</strong></p>","uid":"8a7a8c3d-7ffa-4feb-9b53-92d7d6da26e4","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>1. 找Initiliaze_list</p>","uid":"bd69c702-b499-42d0-a5ef-7215c096bef1","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>2. 尝试聚合初始化</p>","uid":"aea0faf6-570e-43af-be96-f9256d739af7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>3. 尝试构造函数</p>","uid":"e6478b28-6bf8-4ea0-bf1a-4776c4f187b9","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>失败</p>","uid":"ed45ba85-e0cb-48e7-87bb-5ed3f8dfdb32","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>explicit 构造语义禁止 A = a {1,2,3} 这种形式， 这种形式称为拷贝列表构造</p>","uid":"90dab08b-37f2-486b-b402-57858ef8a9ca","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>没有构造函数的聚合类/POD</p>","uid":"846a1191-b13b-476f-a069-99fa729a7260","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>可以使用列表初始化构造</p>","uid":"a3dfbd6e-df95-4d69-9443-e2ec0ed82473","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>POD</p>","uid":"7b997417-6efc-4db8-b679-06ac2029cfd7","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>没有什么特殊构造行为</p>","uid":"cd62e428-6de0-4b79-a976-70fc710e94f7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>没有虚函数</p>","uid":"bca212fe-296d-4dd4-96bd-b9a32e5b8033","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>标准布局</p>","uid":"c990a00e-ad84-42b8-b408-c365bc9b443d","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>可以使用memcpy等拷贝，另外也可使用列表初始化构造</p>","uid":"47b2f856-1e4d-4e0c-a487-60eb6d65df36","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>模板</p>","uid":"a6ad3e3b-2215-4940-a987-62977aacfaca","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>两阶段查找</p>","uid":"10f571e9-aa4b-40a9-b51e-e312a0e13659","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>属于一种模板编译机制</p>","uid":"bb98e020-64df-45d7-8f99-688970754e04","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>第一阶段，查找不依赖模板的变量、函数等定义，检查合法性</p>","uid":"fa9afdac-ece8-42e9-9c01-72372b69b34a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>典型: 全局变量、外部函数等</p>","uid":"10080979-65d5-48aa-bb80-0ae601a3645b","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>检查语法正确性</p>","uid":"1b51ce05-1be2-48cf-b2c3-684094fc0c7b","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>第二阶段，查找与模板类型有关的变量，如T::value的静态变量、t的某些方法等</p>","uid":"28c62bbd-c949-49da-80ba-3e2e5fb6cf80","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>典型t.abc()</p>","uid":"7f60a891-634c-48ae-930b-225d5c1e3ab9","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>SIFINAE</p>","uid":"ef786acc-0035-41b5-bbbb-4c42239831ae","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>用于TMP、以及模板实例化等</p>","uid":"05651a6e-302a-4c6b-92d2-966a3d781944","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>四大步骤</p>","uid":"62d5787f-537c-4620-bc01-dc4e28d3b158","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>替换</p>","uid":"7fac5e81-324e-4220-9b54-0a3239ee0483","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>将模板参数替换为传入的类型</p>","uid":"5e666c7c-5f17-4b61-9f20-ef50f0a76bbd","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>失败</p>","uid":"564cd59d-b296-4695-9039-c0ec66fa91b4","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>类型带入后，可能会产生失败，比如T::type 不存在</p>","uid":"aa5f773e-a4fc-4029-85be-4ff1bf759d8e","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>不是错误</p>","uid":"7d5ddaae-9ece-41f1-ac17-a8c9d5f7d7af","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>不会产生报错，但会排除当前模板</p>","uid":"72293ad2-2568-49c2-9bec-d361232ac735","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>继续查找</p>","uid":"c280d758-4cf9-4726-bca6-f40bc8417b1b","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>如果一直没找到，则会报错，但是报找不到匹配的模板</p>","uid":"6d6e9df1-beef-443c-8ccf-670cade3f628","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>常见：用eanble_if，或者某些trait 来控制模板的实例化</p>","uid":"c30fe804-c94f-4aa6-a301-52694ff57aea","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>比如，我想实现一个int_add(), 那么就可以使用enable_if 和 is_interger 来控制实例化</p>","uid":"9ccaaa60-1cbf-4fc5-b5ea-0d9f0bbe36cf","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>SIFINAE 通常是作用于不同模板，相当于类型带入时产生了失败， 同一模板的不同实例（含特化）通常和模板展开的条件控制和递归终止有关</p>","uid":"4d7a8759-2ab8-4e63-96f5-c36b2de6e350","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>模板版本区别</p>","uid":"3637be24-f4d7-4809-bfd6-a2dfcf8c0447","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>模板参数数量不同</p>","uid":"baadf1c3-6b43-44e2-ab86-c9640e861801","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>模板类型不同(比如非类型参数的int&nbsp;&nbsp;或者bool)</p>","uid":"842b8e50-d4d6-43f0-a1ac-27184e366a4b","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>非类型模板参数</p>","uid":"2beddf38-1d70-45bb-a47e-43875077e027","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>通常用于定义编译器常量（代替宏）</p>","uid":"e08587db-3c78-4c2b-a4e6-7311152e73cd","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>或者用于模板的条件分支（如, int 1 2 3 4 5 的特化版本，以及默认版本）</p>","uid":"67675d3c-3b50-4378-8814-ec4e5f154ca7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>编译期计算</p>","uid":"2c0f03f2-7115-41d9-864d-94f667c17553","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>如可以定义一个模板struct{static add = T+N;}</p>","uid":"86b117d8-bfba-4e1f-8b24-60c345c382c7","expand":true,"richText":true,"isActive":false},"children":[]}]}]}]},{"data":{"text":"<p>模板类型推导</p>","uid":"e20faba5-2e82-456b-80c6-15334e1cafb5","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>auto 类型推导</p>","uid":"cb25a4ae-4204-4984-a272-45ac7697cda0","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>模板类型推导</p>","uid":"d053623b-d996-4c42-8dd9-f40c9a000f67","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>T int -&gt; 推导为int&nbsp;&nbsp;最直接情况</p>","uid":"cdc9b939-1b0f-4e06-83e8-76cd6f4c957c","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>T* 这里定义了一个模式，输入的参数为int* 时， 根据模式T会被推导为int</p>","uid":"6fa4e74e-eff1-4f5b-8801-bf0f22bbc93f","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>T&amp; 同样定义一个模式， 输入参数为int 时，T 推导为int, int&amp; 时，T也推导为int</p>","uid":"61930b8d-6f39-4c01-87f5-f869744b6d63","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>引用模式和引用机制有关，T&amp; 可以接收T和T&amp;</p>","uid":"849f23b1-c436-4fcb-96e4-a83a5a00ef8b","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>参数含cv限定符的推导</p>","uid":"dcaf0e3d-546d-470b-bed0-7ea30411c94a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>模板定义的模式包含cv限定符， 那么推导的T则不包含cv， 比如，const T, 输入const int, T 被推导为int</p>","uid":"37db78dc-8cc0-46f5-9535-ea706f7883a7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>如果不包含cv限定符，那么推导的T将包含cv限定符，如 T，输入const int, 则推导为const int</p>","uid":"0a99edc7-a6e4-44ee-8ca4-73a6c51827b6","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p><strong>万能引用</strong></p>","uid":"45a84853-7408-40af-b99e-162f5032bda5","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>T&amp;&amp;</p>","uid":"ba24137a-1303-4299-9e39-5bc367459bbd","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>必须通过模板类型推导工作，如果指明类型，则退化为右值引用</p>","uid":"45dbfe69-dcf9-46f5-950f-6610fb0038f0","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>输入左值时，对应左值引用，输入右值时，产生右值引用</p>","uid":"857c548b-2740-4976-8ca4-eb4cde9f9d91","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>引用折叠</p>","uid":"3c1665da-f90f-4a3a-b79e-efe40445d78f","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>对于T&amp; 模式，不论输入什么类型，都是左值引用（即便是输入右值）</p>","uid":"4fe4e1d2-6271-4b1e-a7fd-fc5d300bfeaf","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>对于T&amp;&amp; 模式，输入左时，对应左值引用，输入右值时，产生右值引用，即上面的万能引用</p>","uid":"aafb6903-0689-4127-ac32-4a3713bcbc16","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>数组会被推导成指针</p>","uid":"1363807f-ab77-47a2-8ee5-0113f9ceef4a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>这个主要在于数组的类型包含其维度信息，如果吧这些都算进去，将会出现过多的模板实例，但是功能完全一样</p>","uid":"fe9811c2-b379-46f5-9d0a-89ef0f4e8f9b","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>数组总体来说行为和指针差不多，且在C++中，array 已较少使用</p>","uid":"f2204734-9ce1-45f2-a3f4-496276b0660b","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>尽可能推导最精确的类型，倾向于直接匹配而非隐士转换</p>","uid":"a562460c-b998-47e1-80eb-1ac0891552c0","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>模板特化</p>","uid":"3ffa8d28-27ba-43ca-9698-533b1d1405b0","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>特化形式</p>","uid":"895e3841-f5cd-437a-9bc8-93a962c01e62","expand":true,"richText":true,"isActive":false,"generalization":[{"text":"<p>给定模板参数的情况下，走的都是模板，这里匹配的前提是使用模板类型推导</p>","range":[2,3],"uid":"9b83b149-2b60-49b3-ba31-707c55f64f07","richText":true,"isActive":false,"expand":true}]},"children":[{"data":{"text":"<p>某些参数的特化</p>","uid":"01c69da3-a9c3-42e6-ade7-2c829a4d111f","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>偏特化，类模板支持偏特化和全特化</p>","uid":"cf62a20f-9fd4-4dc3-956b-b06891592cbf","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>全部参数的特化</p>","uid":"dcfd4dbb-ef25-43a8-8f16-c468d6036357","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>函数模板只支持全特化，因偏特化通常没啥必要（其实感觉是语言层面不好实现）</p>","uid":"1aca78d2-44a1-42d5-8453-e66e3e6c02c6","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>全特化的函数模板，就相当于一个独立函数，参与重载决议时和普通函数优先级相同</p>","uid":"66f1eaac-c22e-4a0e-b46c-dec60a03a4f8","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>特化排序: 全特化&gt;偏特化&gt;一般模板</p>","uid":"669d5de6-f1b2-4e8a-9e52-b0298f1da973","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>普通函数&gt;大于模板</p>","uid":"53f83641-7163-4fdb-ae15-306b1cd5953e","expand":true,"richText":true,"isActive":false},"children":[]}]}]},{"data":{"text":"<p>模板决议</p>","uid":"8f5d443c-2d8c-412e-b19c-e95db5633654","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>重载决议</p>","uid":"39c33d38-a534-4490-b344-3c7a1618438d","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>1. 收集所有同名函数(mangling)前， 含函数模板</p>","uid":"5452da60-4039-493d-a5db-302ce55d97a9","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>2. 确定可行函数，排除类型完全不匹配、或者参数数量不足的函数</p>","uid":"0d8a96da-a441-4eaa-a0f8-5268a872bec0","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>如果找不到则会报错找不到这样的函数</p>","uid":"dbc4b22a-5d57-4b9c-8eb6-84c116a4c15c","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>3. 可行函数匹配规则（不含模板，5个规则）</p>","uid":"d5840c47-6a2f-4560-95a7-6c94387fbfb9","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>精确匹配</p>","uid":"7bb3259a-a289-44e8-93c8-479113a2892a","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>无需转换</p>","uid":"c7727ba5-318d-4758-bdbf-7bbc4c011559","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>类型提升</p>","uid":"ba31891d-f4ab-435f-9088-7059387de046","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>如int-&gt;long， 不会丢失精度的转换，用户自定义类型的类型提升如何定义？</p>","uid":"9231f8db-d2b7-465d-bfe8-e98b16a2b27c","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>标准转换</p>","uid":"d1b3928e-e6b6-4c52-a9dc-c679f8316b73","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>如int-&gt;double, 可能会产生信息丢失的转换（产生精度问题）</p>","uid":"f84178f1-3940-44ed-a7bb-3f98fe18e6e8","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>用户自定义转换</p>","uid":"99d1daa2-4f90-4e5b-886d-3450d4e0245d","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>可由构造函数隐式转为某个参数</p>","uid":"4642f0c9-f0eb-4309-810c-8a2474e2a725","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>变参函数</p>","uid":"455ec1cb-942a-4df1-9dd7-617c9266fdf1","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>4. 可行函数匹配规则（含模板）</p>","uid":"a2e0e691-8dd0-492d-8558-7fbdcc8d0359","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>进行模板类型推导（如果制定模板参数了，也就不存在决议问题）</p>","uid":"a82b526d-c891-4142-883e-5315416e23eb","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>推导失败的会被SIFINAE机制排除</p>","uid":"40836727-503e-4c00-9ed6-8f659b05d2ad","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>函数模板产生的实例匹配优先级比较模糊，一般而言，如果函数模板能够产生精确匹配，则匹配该实例，否则位于一般函数之后</p>","uid":"d513805d-34fb-4691-a1a0-49b0ab7b725d","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>在非精确匹配的情况下，模板特化程度越高则匹配优先级越高</p>","uid":"6c312300-1191-4b10-9717-235bf407f1d0","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>模糊规则</p>","uid":"358e79ad-91c2-4772-8179-c4c4f22d2aeb","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>0. 精确匹配的模板实例</p>","uid":"8a025bed-3f3c-464f-8dad-14adca7072bd","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>上述3.定义的规则</p>","uid":"adf34d85-7b55-47ca-b12a-bcf4e183bbcb","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>全特化</p>","uid":"74f8aa2b-d1d9-43fe-93f3-bb245715f7f2","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>全特化可能会和普通函数冲突，引起歧义</p>","uid":"2b68db3a-f27c-4dd9-aded-8a30bad233e7","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>偏特化</p>","uid":"96ee74f5-1367-4870-b7a3-58b393073c39","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>一般模板</p>","uid":"f05c6bb4-bb54-45f1-9a5e-b3820128c441","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>在精确匹配的普通函数和模板也可以产生匹配的情况下，优先匹配函数，因为不需要做推导工作</p>","uid":"9546dd6c-a23c-4b7e-905a-54c1ce27b87f","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>要点：只讲上面的大体规则，细节不要多啰嗦，讲不清楚也记不住</p>","uid":"6f76b04f-e4bf-4b72-a339-857249637899","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>总体来说编译器重载决议是贪心的，要做的转换推导工作越少优先级越高</p>","uid":"63733037-2c75-4d3c-9169-509b2039f807","expand":true,"richText":true,"isActive":false},"children":[]}]}]}]},{"data":{"text":"<p>UB</p>","uid":"3ec1fe30-67b7-46c6-a522-7271f156f6d9","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>一般UB可能会崩溃，但可能得情况是允许任何情况发生</p>","uid":"9b025205-1a55-4a3c-abcf-bce7fac0dbb7","expand":true,"richText":true,"isActive":false,"customTextWidth":343},"children":[{"data":{"text":"<p>崩溃</p>","uid":"d32736ed-feb7-4c56-84e9-8128168e41f7","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>结果错乱</p>","uid":"414e1c12-b9ae-48ee-b55f-213223a79169","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>编译器假定永远不会产生UB的代码，因此某些情况下的优化不符合逻辑</p>","uid":"c2f7c90f-3e25-45ed-a029-0c50733a7deb","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>比如int类型溢出就是UB，不能假定编译器行为</p>","uid":"19c4ee13-4af9-4286-bb0c-f6af3c741d2d","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>对于可能出发UB的代码，即便是在做了保护处理后，如果编译器优化时在前后路径推断出UB恒成立或者恒不成立，则可能招致危险的行为</p>","uid":"5271d041-f0a4-42b1-8980-b5597e99a07e","expand":true,"richText":true,"isActive":false},"children":[]}]}]}],"smmVersion":"0.14.0-fix.1"},"theme":{"template":"classic4","config":{}},"view":{"transform":{"scaleX":1,"scaleY":1,"shear":0,"rotate":0,"translateX":-865,"translateY":1145,"originX":0,"originY":0,"a":1,"b":0,"c":0,"d":1,"e":-865,"f":1145},"state":{"scale":1,"x":-865,"y":1145,"sx":-865,"sy":1146}}}